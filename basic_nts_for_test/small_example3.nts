nts small_debug_example;
ivar1, ivar2 :int, rvar1, rvar2 : int, ivar3 :int;

fun1 {
in v1 : int, r2 : int;
out p1:int, p2 : int;

tmp1 : int, tmp2 : int;



initial  s0;
final  sfinal;
error  serr;


s0 -> s1 { tmp1' = v1 *2 and havoc(v1) }
s1 -> s2 { r2'= r2/2 and  havoc(r2) }  
s1 -> s4 {havoc()}
s4 -> s3 {havoc()}
s4 -> s5 {havoc()}
s5 -> sfinal { havoc()}
s2 -> s3 { tmp1' = tmp1 + 1 and havoc(tmp1) }
s3 -> s2 { tmp1 <= 1000 }
s3 -> sfinal {  -2 <= r2 and r2 < 2 and p1 = v1 and tmp1 <= 1000 }
s1 -> serr { -2 > r2 or r2 >= 2 }
}





fun2 {

in v: int, p : int;
out g,h : int;


initial sf0;
final fun2sfinal;

sf0 -> sf1 { v > p }
sf0 -> sf2 { v <= p }

sf2 -> sf3 {(g',h')=fun1(1+v,3) and havoc(g,h)}
sf1 -> sf3 {(g',h')=fun1(v-1,2) and havoc(g,h)}
sf3->fun2sfinal{havoc()}

}

main {

p,q:int;

initial maininit;
final mainfinal;



maininit->ms1{havoc(p,q)}
ms1->ms2{(p',q')=fun2(p,q) and havoc(p,q)}
ms2->mainfinal {havoc()}
}
